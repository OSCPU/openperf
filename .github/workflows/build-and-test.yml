name: Test openperf

on:
  push:
  workflow_dispatch:

env:
  AM_HOME: "${{ github.workspace }}/abstract-machine"
  NEMU_HOME: "${{ github.workspace }}/nemu"

jobs:
  openperf_build_test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test_name: ["mcf", "x264", "tcc", "stream", "linpack", "gemm", "whetstone"]
        test_size: ["test", "ref"]
        arch: ["native", "riscv32-nemu"]
        exclude:
          - test_size: "ref"
            test_name: "tcc"
    steps:
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - uses: cachix/cachix-action@v14
        with:
          name: ysyx
          authToken: '${{ secrets.CACHIX_SIGNING_KEY }}'

      - name: Eval devshell
        id: eval-devshell
        run: |
          echo "devshell-output=$(nix eval ./openperf#devShells.x86_64-linux.${{ matrix.arch }} --json)" >> "$GITHUB_OUTPUT"

      - name: Checkout Main Repo (openperf)
        id: checkout-openperf
        uses: actions/checkout@v4
        with:
          path: openperf

      - name: Checkout Nemu Repo
        id: checkout-nemu
        if: ${{ contains(matrix.arch, 'nemu') }}
        uses: actions/checkout@v4
        with:
          token: '${{ secrets.DEPLOY_KEY }}'
          repository: xinyangli/openperf-nemu
          path: nemu

      - name: Checkout Abstract Machine Repo
        id: checkout-am
        uses: actions/checkout@v4
        with:
          token: '${{ secrets.DEPLOY_KEY }}'
          repository: xinyangli/openperf-abstract-machine
          path: abstract-machine

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: cache-${{ runner.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Prepare devshell
        run: |
          mkdir -p /tmp/env
          nix develop --no-use-registries --profile /tmp/env/openperf-env-${{ matrix.arch }} ./openperf#${{ matrix.arch }}

      - name: Cache common libraries
        uses: actions/cache@v4
        with:
          key: openperf-common-${{ matrix.arch }}-${{ steps.eval-devshell.outputs.devshell-output }}-${{ steps.checkout-openperf.outputs.commit }}-${{ steps.checkout-am.outputs.commit }}
          path: |
            openperf/src/common

      - name: Generate config if target platform is nemu
        if: ${{ contains(matrix.arch, 'nemu') }}
        run: |
          nix develop --no-use-registries /tmp/env/openperf-env-${{ matrix.arch }} --impure --command make -C $NEMU_HOME ARCH=riscv32-nemu openperf_${{ matrix.arch }}_defconfig

      - name: Build common libraries
        run: |
          nix develop --no-use-registries /tmp/env/openperf-env-${{ matrix.arch }} --impure --command make -C openperf ARCH=${{ matrix.arch }} ALL=dummy run

      - name: Run openperf benchmark
        working-directory: openperf
        run: |
          nix develop --no-use-registries /tmp/env/openperf-env-${{ matrix.arch }} --impure --command make ARCH=${{ matrix.arch }} ALL=${{ matrix.test_name }} mainargs=${{ matrix.test_size }} run

